{
  "name": "The Quest To Prove The Generalised Centre Conjecture",
  "tagline": "Investigating the structure of convex subsets of spherical buildings (using Python and Processing!).",
  "body": "# An Explanation of the Code used to Create the Images in my Project\r\n\r\n_This page isn't quite finished, I will finish updating it soon! I am in the process of fixing some of the known issues. If you would like to help fixing any issues, or generally improving the project, please get in touch!_\r\n\r\nIn my final year project I did some computations which, when written down by hand, were rather long and tedious. After doing these computations by hand it became clear that programming a computer to do them for me would be far easier. To understand the computations and the mathematics behind them, you will (unfortunately) have to read my report.\r\n\r\nHere I will briefly talk about each program so you have some idea of what they are trying to do.\r\n\r\n## Code For SL3\r\n\r\nInitially I wrote findingsl3.py to find the r-points of the building of SL3 and then wrote Animated_Complex.pde to animate the results. This animation can also be found on [my Open Processing page](http://www.openprocessing.org/sketch/226756).\r\n\r\nWith the release of PythonMode for Processing3 I then wrote SL3.pyde which allows you to control which symmetric power you see with the arrow keys, and has no upper limit for the symmetric power as each one is generated every time you press a key.\r\n\r\n## Code For SL4\r\n\r\nHaving successfully written a program to do the SL3 case for me, it was time to move up to SL4. The additional dimension made this code far more complicated and hard to read but (after spending a good 6 months checking it) I can say with confidence that it does work (mostly... see later).\r\n\r\nThe real challenge with SL4 was not writing the python code, but plotting the results in a useful way. sl4points.pde (together with the output text files) make an interactive, animated representation of an appartment of Delta raised to the 1st, 2nd, and 3rd symmetric powers. The 4th symmetric power is too messy to be worth presenting here, although this repository does give you the all tools to investigate further.\r\n\r\n## Checking a Claim I Make in my Report \r\n\r\nFinally, in my report - in the last paragraph of Example 3.1 - I say that it is possible to write a program to check a particular claim. equation31.py is such a program. (The name refers to Equation 3.1 in the report which this program is mimicking.)\r\n\r\n## Known Issues\r\n\r\nAs I mention above, the python code I wrote to generate the r-points of Delta seems to work for the purposes of finding an example of a quadrilateral region for the SL4 case when r = 3. However, the code itself does have some known issues.\r\n\r\nMost notably: the code output is not independent of the step size. Changing the values of the global variables increment1 and increment2 should result in an output with r-points at the same angles (maybe some are missed if the step size is too small, but the r-points we do find should be in the same place!). This is currently not what happens... Any help resolving this issue would be greatly appreciated.\r\n\r\nLess importantly, my visualisations of Delta for SL3 do not seem to plot the points in the correct place. However, the number of points is correct and for all intents and purposes (with respect to proving rigorous mathematical statements) that is all that matters. Of course it would be nice to fix this. There is probably something wrong in the python code that generates the points, again the output is not independent of the step size, so the java and python versions of the visualisation do not agree. But as I said, the number of points is correct so this issue is really just cosmetic.\r\n\r\nThere are probably some more issues, I will update this section as when I find them, or remember what they are.\r\n\r\n**Hope this helps. Please do contact me with any questions you have.**",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}